<?php
/**
 * @file
 * Carbide builder module.
 */

/**
 * Implements hook_update_status_alter().
 */
function carbide_builder_update_status_alter(&$projects) {
  if (isset($projects['carbide_builder']) && isset($projects['carbide_builder']['title'])) {
    $projects['carbide_builder']['title'] .=  ' ' . t('on sooperthemes.com. Click for more info.');
  }
}

/**
 * Implements hook_menu().
 */
function carbide_builder_menu() {
  $items = array();
  $items['carbide_builder_ajaxurl'] = array(
    'page callback' => 'carbide_builder_ajax',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['carbide_builder_image_style_url'] = array(
    'page callback' => 'carbide_builder_image_style_url',
    'access callback' => 'user_access',
    'access arguments' => array('edit via carbide builder'),
    'type' => MENU_CALLBACK,
  );

  $fields = field_info_fields();
  foreach ($fields as $key => $field) {
    $name = explode('_', $key);
    if (end($name) == 'tpl') {
      $items['node/%node/' . $key] = array(
        'title' => $key,
        'page callback' => 'drupal_get_form',
        'page arguments' => array('carbide_builder_field_template', 1, 2),
        'access callback' => 'user_access',
        'access arguments' => array('edit via carbide builder'),
        'type' => MENU_CALLBACK,
      );
    }
  }

  $items['admin/config/content/carbide_builder'] = array(
    'title' => 'Carbide builder',
    'description' => 'Configuration for carbide builder module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('carbide_builder_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer modules'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Form constructor for the carbide builder form.
 */
function carbide_builder_form($form, &$form_state) {
  $form['carbide_bootstrap'] = array(
    '#type' => 'radios',
    '#title' => t('Include Bootstrap Files'),
    '#description' => t('Bootstrap 3 is required. Bootstrap 3 Light is recommended if your theme has conflicts with Bootstrap 3 CSS. Bootstrap Light includes all grid and helper classes but doesn\'t contain normalize.css and some typography styles.'),
    '#options' => array(
      0 => t('No'),
      1 => t('Load Bootstrap 3 Full'),
      2 => t('Load Bootstrap 3 Light'),
    ),
    '#default_value' => variable_get('carbide_bootstrap', 0),
  );
  $form['carbide_development'] = array(
    '#type' => 'checkbox',
    '#title' => t('Development mode'),
    '#description' => t('In Development mode Carbide Builder will use non-minified files to help you with debugging.'),
    '#default_value' => variable_get('carbide_development', FALSE),
  );
  $form['experimental'] = array(
    '#type' => 'fieldset',
    '#title' => t('Experimental Features'),
    '#description' => t('For experimental users'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['experimental']['carbide_format_filters'] = array(
    '#type' => 'checkbox',
    '#title' => t('Process Text Format Filters on Frontend Builder content'),
    '#description' => t('If a field uses Carbide Builder as field formatter any filters that are set on the field\'s text format will be ignored. This is because when editing on the frontend, you are editing the raw field contents. With this setting enabled the Carbide editor still loads raw fields content, but users that don\'t have Carbide Builder editing permission will get a filtered field. Some filters will not work at all with Carbide Builder while others should work just fine.'),
    '#default_value' => variable_get('carbide_format_filters', FALSE),
  );
  // $form['carbide_recaptcha_publickey'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Recaptcha publickey'),
  //   '#default_value' => variable_get('carbide_recaptcha_publickey', ''),
  // );
  // $form['carbide_recaptcha_privatekey'] = array(
  //   '#type' => 'textfield',
  //   '#title' => t('Recaptcha privatekey'),
  //   '#default_value' => variable_get('carbide_recaptcha_privatekey', ''),
  // );
  return system_settings_form($form);
}

/**
 * Implements hook_permission().
 */
function carbide_builder_permission() {
  return array(
    'edit via carbide builder' => array(
      'title' => t('Edit via carbide builder'),
      'restrict access' => TRUE,
      'description' => t('Edit via carbide builder. Allows users to build layouts, design beautiful content and add dynamic components.'),
    ),
  );
}

/**
 * Implements hook_init().
 */
function carbide_builder_init() {
  // Azexo Composer Legacy Mode
  if (variable_get('azexo_composer_loader_hashes')) {
    // Sitewide loading of all sidebar element assets
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/buttons.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/contact.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/cta.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/dropshadow.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/iconbox.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/iconwell.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/imagebox.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/pricingtable.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/quoteslider.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/social.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/icon.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/teambox.css', array('group' => CSS_THEME));
    drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/elements/timeline.css', array('group' => CSS_THEME));
  }
}

/**
 * Implements hook_flush_caches().
 */
function carbide_builder_flush_caches() {
  // Delete all Carbide per-field custom JS
  file_scan_directory('public://carbide_builder', '/.*/', array('callback' => 'file_unmanaged_delete'));
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 * This feature is for having a field instance that updates across all entities where it's used on
 */
function carbide_builder_form_field_ui_field_edit_form_alter(&$form, &$form_state) {
  $name = explode('_', $form['#instance']['field_name']);
  if (end($name) == 'tpl' || end($name) == 'template') {
    $form['#submit'][] = 'carbide_builder_field_ui_field_edit_form_submit';
  }
}

/**
 * Form submission handler for field_ui_field_edit_form().
 *
 * Adds a new batch.
 *
 * @see carbide_builder_form_field_ui_field_edit_form_alter()
 */
function carbide_builder_field_ui_field_edit_form_submit($form, &$form_state) {
  $field_name = $form_state['values']['instance']['field_name'];
  if ($form_state['values']['instance']['entity_type'] == 'node') {
    $entities = entity_load($form_state['values']['instance']['entity_type'], FALSE, array('type' => $form_state['values']['instance']['bundle']));
  }
  if (!empty($entities)) {
    $operations = array();
    foreach ($entities as $entity) {
      $operations[] = array(
        'carbide_builder_update_field',
        array(
          $form_state['values']['instance']['entity_type'],
          $entity,
          $field_name,
          $form_state['values'][$field_name],
        ),
      );
    }
    $batch = array(
      'operations' => $operations,
      'finished' => 'carbide_builder_update_field_finished',
      'title' => t('Update templates'),
    );
    batch_set($batch);
  }
}

/**
 * Batch operation.
 */
function carbide_builder_update_field($entity_type, $entity, $field_name, $field, &$context) {
  $entity->{$field_name} = $field;
  field_attach_update($entity_type, $entity);
  entity_get_controller($entity_type)->resetCache(array($entity_id));

  if ($entity_type == 'node') {
    $context['results'][] = $entity->title;
    $context['message'] = t('Template field updated. Entity: <em>@title</em>', array('@title' => $entity->title));
  }
}

/**
 * Batch finished operation.
 */
function carbide_builder_update_field_finished($success, $results, $operations) {
  if ($success) {
    drupal_set_message(t('Template fields updated @count entities: @items', array(
      '@count' => count($results),
      '@items' => theme('item_list', array('items' => $results)),
    )));
  }
  else {
    drupal_set_message(t('Completed with errors'), 'error');
  }
}

/**
 * Page callback.
 */
function carbide_builder_field_template($form, &$form_state, $node, $field_name) {
  $field = field_info_field($field_name);
  $items = field_get_items('node', $node, $field_name);
  $instance = field_info_instance('node', $field_name, $node->type);
  $element = array(
    '#type' => 'fieldset',
    '#collapsible' => FALSE,
    '#parents' => array('template'),
  );
  $element = field_default_form($instance['entity_type'], $node, $field, $instance, LANGUAGE_NONE, $items, $element, $form_state, 0);
  $form[] = $element;
  $form['actions'] = array('#type' => 'actions');
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
  );
  return $form;
}

/**
 * Page callback submit.
 */
function carbide_builder_field_template_submit($form, &$form_state) {
  $node = $form_state['build_info']['args'][0];
  $field_name = $form_state['build_info']['args'][1];
  $node = node_load($node->nid);
  $node->{$field_name} = $form_state['values'][$field_name];
  field_attach_update('node', $node);
  drupal_set_message($field_name . ' ' . t('saved to node @nid', array('@nid' => $node->nid)));
}

/**
 * Parse a URL or embed code and return a rendered HTML.
 */
function carbide_builder_embed($link) {
  $file = media_parse_to_file($link);
  return drupal_render(file_view_file($file));
}

/**
 * Get files preview.
 *
 * Returns a data in JSON format with the necessary classes to support a media
 * thumbnail. Also provides default fallback images if no image is available.
 */
function carbide_builder_get_files_preview($fids) {
  $files = file_load_multiple(explode(',', $fids));
  $previews = array();
  foreach ($files as &$file) {
    $previews[] = drupal_render(media_get_thumbnail_preview($file));
  }
  drupal_json_output($previews);
}

/**
 * Get files url.
 *
 * Returns a data in JSON format with string
 * containing a URL that may be used to access the file.
 */
function carbide_builder_get_files_urls($fids) {
  $files = file_load_multiple(explode(',', $fids));
  $urls = array();
  foreach ($files as &$file) {
    $urls[] = file_create_url($file->uri);
  }
  drupal_json_output($urls);
}

/**
 * Return additional element's params.
 */
function carbide_builder_element_to_param($param_name, $element) {
  if (!isset($element['#title'])) {
    return FALSE;
  }
  if (isset($element['#options'])) {
    if (empty($element['#options']) || is_array(reset($element['#options']))) {
      return FALSE;
    }
  }
  if (isset($element['#empty_option'])) {
    $element['#options'] = array_merge(array('' => $element['#empty_option']), $element['#options']);
  }
  $param = array(
    "heading" => $element['#title'],
    "param_name" => $param_name,
  );
  if (isset($element['#description'])) {
    $param["description"] = $element['#description'];
  }
  switch ($element['#type']) {
    case 'textfield':
      $param['type'] = 'textfield';
      break;

    case 'checkbox':
      $param['type'] = 'checkbox';
      $param['value'] = array(t("Yes") => '1');
      break;

    case 'checkboxes':
      $param['type'] = 'checkbox';
      $param['value'] = array_flip($element['#options']);
      break;

    case 'radio':
      $param['type'] = 'dropdown';
      $param['value'] = array_flip($element['#options']);
      break;

    case 'radios':
      $param['type'] = 'dropdown';
      $param['value'] = array_flip($element['#options']);
      break;

    case 'select':
      $param['value'] = array_flip($element['#options']);
      if (isset($element['#multiple'])) {
        $param['type'] = 'checkbox';
      }
      else {
        $param['type'] = 'dropdown';
      }
      break;

    default:
      $param = FALSE;
      break;

  }
  return $param;
}

/**
 * Set map filed for drupal cache.
 */
function carbide_builder_map_fields() {
  if (module_exists('entity')) {
    $fields_cache = &drupal_static(__FUNCTION__);
    if (!isset($fields_cache)) {
      if ($cache = cache_get('map_fields')) {
        $fields_cache = $cache->data;
      }
      else {
        $fields_cache = array();
      }
    }
    if (empty($fields_cache)) {
      module_load_include('inc', 'field_ui', 'field_ui.admin');
      cache_set('map_fields', $fields_cache, 'cache');
    }
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function carbide_builder_field_formatter_info() {
  return array(
    'text_carbide_builder' => array(
      'label' => t('Carbide builder'),
      'field types' => array(
        'text',
        'text_long',
        'text_with_summary',
        'entityreference',
      ),
    ),
  );
}

/**
 * Implements hook_wysiwyg_editor_settings_alter().
 */
function carbide_builder_wysiwyg_editor_settings_alter(&$settings, $context){
  //check if the editor is ckeditor and the version is at least 4.0
  if($context['profile']->editor=='ckeditor' && $context['editor']['installed version'][0]>3){
    //add custom settings for ckeditor 4.+ here
    $settings['customConfig'] = base_path() . drupal_get_path('module', 'carbide_builder') . '/js/ckeditor.config.js';
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function carbide_builder_field_widget_form_alter(&$element, &$form_state, $context) {
  if (isset($element['#field_name'])) {
    $name = explode('_', $element['#field_name']);
    if (end($name) == 'tpl' || end($name) == 'template') {
      if ($element['#type'] == 'select') {
        global $base_path;
        $js = 'jQuery(\'[name=\"' . $element['#field_name'] . '[' . $element['#language'] . ']\"]\').find(\':selected\').val()';
        $element['#suffix'] = l(t('Edit template'), '', array('attributes' => array('onclick' => 'window.open("' . $base_path . 'node/" + ' . $js . ' + "/edit", "_blank"); return false;')));
      }
      else {
        if (end($element['#field_parents']) == 'template') {
          return;
        }
        if ($element['#entity_type'] == 'node') {
          if (isset($element['#entity'])) {
            $element = array(
              '#type' => 'markup',
              '#markup' => l(t('Click to edit @title', array('@title' => $element['#title'])), 'node/' . $element['#entity']->nid . '/' . $element['#field_name']),
            );
          }
        }
        else {
          $element['#access'] = FALSE;
        }
      }
    }
  }
}

/**
 * Create regex for get shortcode.
 */
function carbide_builder_get_shortcode_regex($tagnames) {
  $tagregexp = implode('|', array_map('preg_quote', $tagnames));
  // WARNING! Do not change this regex without changing do_shortcode_tag()
  // and strip_shortcode_tag()
  // Also, see shortcode_unautop() and shortcode.js.
  $regex = '';
  $regex .= '\\[';
  // Opening bracket.
  $regex .= '(\\[?)';
  // 1: Optional second opening bracket for escaping shortcodes: [[tag]].
  $regex .= "($tagregexp)";
  // 2: Shortcode name.
  $regex .= '(?![\\w-])';
  // Not followed by word character or hyphen.
  $regex .= '(';
  // 3: Unroll the loop: Inside the opening shortcode tag.
  $regex .= '[^\\]\\/]*';
  // Not a closing bracket or forward slash.
  $regex .= '(?:\\/(?!\\])';
  // A forward slash not followed by a closing bracket.
  $regex .= '[^\\]\\/]*';
  // Not a closing bracket or forward slash.
  $regex .= ')*?)(?:(\\/)';
  // 4: Self closing tag ...
  $regex .= '\\]';
  // ... and closing bracket.
  $regex .= '|\\]';
  // Closing bracket.
  $regex .= '(?:(';
  // 5: Unroll the loop: Optionally, anything between the opening
  // and closing shortcode tags.
  $regex .= '[^\\[]*+';
  // Not an opening bracket.
  $regex .= '(?:\\[(?!\\/\\2\\])';
  // An opening bracket not followed by the closing shortcode tag.
  $regex .= '[^\\[]*+';
  // Not an opening bracket.
  $regex .= ')*+)\\[\\/\\2\\]';
  // Closing shortcode tag.
  $regex .= ')?)(\\]?)';
  // 6: Optional second closing brocket for escaping shortcodes: [[tag]].
  return $regex;
}

/**
 * Strip shorcodes.
 */
function carbide_builder_strip_shortcodes($content, $tagnames) {
  $pattern = carbide_builder_get_shortcode_regex($tagnames);
  return preg_replace_callback("/$pattern/s", 'strip_shortcode_tag', $content);
}

/**
 * Get shortcode content.
 */
function carbide_builder_get_shortcode_content($content, $tagnames) {
  $pattern = carbide_builder_get_shortcode_regex($tagnames);
  $matches = array();
  preg_match_all("/$pattern/s", $content, $matches);
  return $matches[5];
}

/**
 * Impements hook_node_presave().
 */
function carbide_builder_node_presave($node) {
  $fields = field_info_instances('node', $node->type);
  foreach ($fields as $field) {
    if (isset($field['display']['default']['type']) && $field['display']['default']['type'] == 'text_carbide_builder') {
      if (property_exists($node, $field['field_name']) && is_array($node->{$field['field_name']})) {
        foreach ($node->{$field['field_name']} as $langcode => $items) {
          if (empty($items)) {
            $node->{$field['field_name']}[$langcode] = array(array('value' => ''));
          }
        }
      }
    }
  }
}

/**
 * Added additional libraries.
 */
function carbide_builder_get_libraries($shortcodes) {
  $libraries = array('css' => array(), 'js' => array());
  $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.waypoints/lib/jquery.waypoints.min.js';
  if (strpos($shortcodes, 'parallax') !== FALSE) {
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.parallax/jquery.parallax.js';
  }
  if (strpos($shortcodes, 'az_counter') !== FALSE) {
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery-countTo/jquery.countTo.min.js';
  }

  if (strpos($shortcodes, 'az_date') !== FALSE || strpos($shortcodes, 'az_countdown') !== FALSE) {
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/datetimepicker/jquery.datetimepicker.css';
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/datetimepicker/jquery.datetimepicker.js';
  }

  if (strpos($shortcodes, 'youtube') !== FALSE) {
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.mb.YTPlayer/dist/css/jquery.mb.YTPlayer.min.css';
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.mb.YTPlayer/dist/jquery.mb.YTPlayer.min.js';
  }

  if (strpos($shortcodes, 'az_carousel') !== FALSE) {
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/owl.carousel/owl-carousel/owl.carousel.css';
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/css/st-owl-carousel.css';
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/owl.carousel/owl-carousel/owl.transitions.css';
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/owl.carousel/owl-carousel/owl.carousel.js';
  }

  if (strpos($shortcodes, 'az_countdown') !== FALSE) {
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/counteverest/css/counteverest.carbide.css';
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/counteverest/js/vendor/jquery.counteverest.min.js';
  }

  if (strpos($shortcodes, 'az_circle_counter') !== FALSE) {
    $libraries['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.circliful/css/jquery.circliful.css';
    $libraries['js'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.circliful/js/jquery.circliful.min.js';
  }

  drupal_alter('carbide_builder_libraries', $libraries);
  return $libraries;
}

/**
 * Parsing shortcode attributes.
 */
function carbide_builder_shortcode_parse_atts($text) {
  $atts = array();
  $pattern = '/(\w+)\s*=\s*"([^"]*)"(?:\s|$)|(\w+)\s*=\s*\'([^\']*)\'(?:\s|$)|(\w+)\s*=\s*([^\s\'"]+)(?:\s|$)|"([^"]*)"(?:\s|$)|(\S+)(?:\s|$)/';
  $text = preg_replace("/[\x{00a0}\x{200b}]+/u", " ", $text);
  if (preg_match_all($pattern, $text, $match, PREG_SET_ORDER)) {
    foreach ($match as $m) {
      if (!empty($m[1])) {
        $atts[strtolower($m[1])] = stripcslashes($m[2]);
      }
      elseif (!empty($m[3])) {
        $atts[strtolower($m[3])] = stripcslashes($m[4]);
      }
      elseif (!empty($m[5])) {
        $atts[strtolower($m[5])] = stripcslashes($m[6]);
      }
      elseif (isset($m[7]) and strlen($m[7])) {
        $atts[] = stripcslashes($m[7]);
      }
      elseif (isset($m[8])) {
        $atts[] = stripcslashes($m[8]);
      }
    }
  }
  else {
    $atts = ltrim($text);
  }
  return $atts;
}

/**
 * Create shortcode_tag.
 */
function carbide_builder_do_shortcode_tag($m) {
  // Allow [[foo]] syntax for escaping a tag.
  if ($m[1] == '[' && $m[6] == ']') {
    return substr($m[0], 1, -1);
  }

  $tag = $m[2];
  $attr = carbide_builder_shortcode_parse_atts($m[3]);

  if (isset($m[5])) {
    // Enclosing tag - extra parameter.
    return $m[1] . '[' . $tag . $m[3] . ']' . carbide_builder_load_cms_element(substr($tag, 3), isset($attr['settings']) ? $attr['settings'] : '') . '[/' . $tag . ']' . $m[6];
  }
  else {
    // self-closing tag.
    return $m[1] . '[' . $tag . $m[3] . ']' . carbide_builder_load_cms_element(substr($tag, 3), isset($attr['settings']) ? $attr['settings'] : '') . '[/' . $tag . ']' . $m[6];
  }
}

/**
 * Added prefix 'az_'.
 */
function carbide_builder_az($key) {
  return 'az_' . $key;
}

/**
 * Get files.
 */
function carbide_builder_recursive_get_files($src) {
  $files = array();
  $dir = opendir($src);
  if (is_resource($dir)) {
    while (FALSE !== ($file = readdir($dir))) {
      if (($file != '.') && ($file != '..')) {
        if (is_dir($src . DIRECTORY_SEPARATOR . $file)) {
          if (!in_array($file, array(
            'assets',
            'carbide_builder',
            'carbide_templates',
            'carbide_elements',
            'carbide_export',
            'carbide_containers',
            'carbide_submissions',
          ))
          ) {
            $files = array_merge($files, carbide_builder_recursive_get_files(realpath($src . DIRECTORY_SEPARATOR . $file)));
          }
        }
        else {
          $files[realpath($src . DIRECTORY_SEPARATOR . $file)] = $file;
        }
      }
    }
  }
  closedir($dir);
  return $files;
}

/**
 * Add data for js.
 */
function carbide_builder_get_template_elements() {
  $template_elements = &drupal_static(__FUNCTION__);
  if (!isset($template_elements)) {
    if ($cache = cache_get('template_elements')) {
      $template_elements = $cache->data;
    }
    else {
      $template_elements = '';

      global $base_url;
      $carbide_elements_folders = array(
        array(
          'folder' => dirname(__FILE__) . DIRECTORY_SEPARATOR . 'carbide_elements',
          'folder_url' => $base_url . '/' . drupal_get_path('module', 'carbide_builder') . '/carbide_elements',
        ),
      );
      drupal_alter('carbide_builder_elements_folders', $carbide_elements_folders);

      $elements = array();
      foreach ($carbide_elements_folders as $carbide_elements_folder) {
        $src = $carbide_elements_folder['folder'];
        $src_url = $carbide_elements_folder['folder_url'];
        if (is_dir($src)) {
          $files = carbide_builder_recursive_get_files($src);
          foreach ($files as $path => $filename) {
            $info = pathinfo($path);
            if ($info['extension'] == 'html') {
              $p = str_replace(DIRECTORY_SEPARATOR, '|', str_replace('.html', '', substr(str_replace($src, '', $path), 1)));
              $elements[$p]['html'] = file_get_contents($path);
              $elements[$p]['name'] = $info['filename'];
              $folders = explode(DIRECTORY_SEPARATOR, str_replace($src, '', $path));
              array_pop($folders);
              $folders = implode('/', $folders);
              $elements[$p]['baseurl'] = $src_url . $folders . '/';
              if (file_exists(str_replace('.html', '.png', $path))) {
                $elements[$p]['thumbnail'] = $src_url . '/' . str_replace('|', '/', $p) . '.png';
              }
            }
          }
        }
      }
      foreach ($elements as $path => &$element) {
        $element['html'] = $element['html'];
      }
      $template_elements = "var carbide_template_elements = " . json_encode($elements) . ";\n";
      cache_set('template_elements', $template_elements, 'cache');
    }
  }
  return $template_elements;
}

/**
 * Remove base url.
 */
function carbide_builder_remove_base_url($content) {
  global $base_url;
  $files_directory = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
  $module_directory = drupal_get_path('module', 'carbide_builder');
  $content = str_replace($base_url, '-base-url-', $content);
  $content = str_replace($files_directory, '-files-directory-', $content);
  $content = str_replace($module_directory, '-module-directory-', $content);
  return $content;
}

/**
 * Add base url.
 */
function carbide_builder_add_base_url($content) {
  global $base_url;
  $files_directory = variable_get('file_' . file_default_scheme() . '_path', conf_path() . '/files');
  $module_directory = drupal_get_path('module', 'carbide_builder');
  $content = str_replace('-base-url-', $base_url, $content);
  $content = str_replace('-files-directory-', $files_directory, $content);
  $content = str_replace('-module-directory-', $module_directory, $content);
  return $content;
}

/**
 * Append html.
 */
function carbide_builder_append_html(DOMNode $parent, $source) {
  $tmp_doc = new DOMDocument("1.0", "UTF-8");
  $tmp_doc->resolveExternals = FALSE;
  $tmp_doc->substituteEntities = FALSE;
  $tmp_doc->strictErrorChecking = FALSE;
  libxml_use_internal_errors(TRUE);
  $raw = '<?xml encoding="UTF-8"><!DOCTYPE html><html><head></head><body>' . $source . '</body></html>';
  if (function_exists('mb_convert_encoding')) {
    $forced_utf8 = mb_convert_encoding($raw, 'HTML-ENTITIES', 'UTF-8');
  }
  else {
    $forced_utf8 = $raw;
  }
  @$tmp_doc->loadHTML($forced_utf8);
  libxml_clear_errors();
  foreach ($tmp_doc->getElementsByTagName('head')->item(0)->childNodes as $node) {
    $imported_node = $parent->ownerDocument->importNode($node, TRUE);
    $parent->appendChild($imported_node);
  }
  foreach ($tmp_doc->getElementsByTagName('body')->item(0)->childNodes as $node) {
    $imported_node = $parent->ownerDocument->importNode($node, TRUE);
    $parent->appendChild($imported_node);
  }
}

/**
 * Update html.
 */
function carbide_builder_update_html($container, &$value, &$js, &$css) {
  global $base_url;
  $value = carbide_builder_add_base_url($value);
  $mode = 'static';
  if ((strpos($value, 'carbide_frontend.min.js') !== FALSE) || strpos($value, 'carbide_frontend.js') !== FALSE) {
    $mode = 'dynamic';
  }
  else {
    // DETECT AND REMOVE EMBEDDED LOADER JS FROM LEGACY CARBIDE BUILDER < 1.1.0
    $value1 = explode('//<![CDATA[', $value);
    if (count($value1) == 2) {
      $value2 = explode('//]]>', $value1[1]);
      if (count($value2) == 2) {
        $mode = 'dynamic';
        $js[] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_frontend.min.js';
        $value = $value1[0] . $value2[1];
      }
    }
  }

  $doc = new DOMDocument("1.0", "UTF-8");
  $doc->resolveExternals = FALSE;
  $doc->substituteEntities = FALSE;
  $doc->strictErrorChecking = FALSE;
  libxml_use_internal_errors(TRUE);
  $raw = '<?xml encoding="UTF-8"><!DOCTYPE html><html><head></head><body>' . $value . '</body></html>';
  $forced_utf8 = mb_convert_encoding($raw, 'HTML-ENTITIES', 'UTF-8');
  @$doc->loadHTML($forced_utf8);
  libxml_clear_errors();

  $xpath = new DOMXpath($doc);
  // We aggregate all element scripts and remove the tag, but not sidebar
  // elements because those would never be restored.
  $result = $xpath->query('//script[not(ancestor::div[contains(@class,"az-template")])]');
  $nodes = array();
  foreach ($result as $node) {
    $nodes[] = $node;
  }
  foreach ($nodes as $node) {
    if ($node->hasAttribute('src')) {
      $src = $node->getAttribute('src');
      if (strpos($src, $base_url . '/') == 0) {
        $src = str_replace($base_url . '/', '', $src);
      }
      $js[] = $src;
      $node->parentNode->removeChild($node);
    }
  }
  $xpath = new DOMXpath($doc);
  // We aggregate all element css and remove the link tags, but not sidebar
  // elements because those would never be restored.
  $result = $xpath->query('//link[not(ancestor::div[contains(@class,"az-template")])]');
  $nodes = array();
  foreach ($result as $node) {
    $nodes[] = $node;
  }
  foreach ($nodes as $node) {
    if ($node->hasAttribute('href') && $node->hasAttribute('rel')) {
      if ($node->getAttribute('rel') == "stylesheet") {
        $href = $node->getAttribute('href');
        if (strpos($href, $base_url . '/') == 0) {
          $href = str_replace($base_url . '/', '', $href);
        }
        $css[] = $href;
        $node->parentNode->removeChild($node);
      }
    }
  }
  $xpath = new DOMXpath($doc);
  $result = $xpath->query('//div[contains(@class,"az-cms-element")]');
  $nodes = array();
  foreach ($result as $node) {
    $nodes[] = $node;
  }
  foreach ($nodes as $node) {
    while ($node->hasChildNodes()) {
      $node->removeChild($node->firstChild);
    }
    $base = $node->getAttribute('data-azb');
    $settings = $node->getAttribute('data-azat-settings');

    // Additional settings for cms views.
    $data = array(
      'display_title' => $node->getAttribute('data-azat-display_title'),
      'override_pager' => $node->getAttribute('data-azat-override_pager'),
      'items' => $node->getAttribute('data-azat-items'),
      'offset' => $node->getAttribute('data-azat-offset'),
      'contextual_filter' => $node->getAttribute('data-azat-contextual_filter'),
      'toggle_fields' => $node->getAttribute('data-azat-toggle_fields'),
    );

    $html = carbide_builder_load_cms_element(substr($base, 3), $settings, $container, $data);

    carbide_builder_append_html($node, $html);
  }
  $value = preg_replace('/^<!DOCTYPE.+?>/', '', str_replace(array(
    '<?xml encoding="UTF-8">',
    '<html>',
    '</html>',
    '<head>',
    '</head>',
    '<body>',
    '</body>',
  ), array('', '', '', '', '', '', ''), $doc->saveHTML()));
  return $mode;
}

/**
 * Builder attach library and js.
 */
function carbide_builder_attach(&$element, $content, $carbide_html_format, $carbide_editor, $carbide_lang) {
  $start_js_weight = 0;
  global $base_url;
  $cms_elements = carbide_builder_get_cms_element_names();
  $e = &drupal_static(__FUNCTION__ . '_carbide_editor');
  if (!isset($e)) {
    $e = $carbide_editor ? 'true' : 'false';
  }

  $element['#attached']['js'][] = array(
    'data' => "window.carbide_editor = " . $e . ";",
    'type' => 'inline',
    'weight' => $start_js_weight + 0,
  );
  if ($carbide_editor) {
    $e = $carbide_editor;
    $element['#attached']['js'][] = array(
      'data' => carbide_builder_get_template_elements(),
      'type' => 'inline',
      'weight' => $start_js_weight + 5,
    );
    $element['#attached']['js'][] = array(
      'data' => "window.carbide_cms_element_names = " . json_encode($cms_elements) . ";",
      'type' => 'inline',
      'weight' => $start_js_weight + 1,
    );

    // Creating a list of views with additional settings.
    $view_elements_settings = carbide_builder_get_cms_view_element_settings();

    // Added js settings for set variable carbide_cms_element_views_settings.
    $element['#attached']['js'][] = array(
      'data' => "window.carbide_cms_element_views_settings = " . json_encode($view_elements_settings) . ";",
      'type' => 'inline',
      'weight' => $start_js_weight + 2,
    );

    // Creating a list of views tags.
    $views_tags = carbide_builder_get_cms_views_tags();

    // Added js settings for set variable views_tags.
    $element['#attached']['js'][] = array(
     'data' => "window.carbide_views_tags = " . json_encode($views_tags) . ";",
     'type' => 'inline',
     'weight' => $start_js_weight + 3,
    );

    // Creating a list of buttons style.
    $button_styles = carbide_builder_get_button_styles();

    // Added js settings for set variable button_styles.
    $element['#attached']['js'][] = array(
      'data' => "window.button_styles = " . json_encode($button_styles) . ";",
      'type' => 'inline',
      'weight' => $start_js_weight + 4,
    );

  }
  else {
    if (!empty($element['id'])) {
      $data = array('carbide_builder' => array('DisallowContainers' => array($element['id'])));
      drupal_add_js($data, 'setting');
    }
  }
  $element['#attached']['js'][] = array(
    'data' => "window.carbide_ajaxurl = '" . $base_url . "/?q=carbide_builder_ajaxurl';",
    'type' => 'inline',
    'weight' => $start_js_weight + 3,
  );
  $element['#attached']['js'][] = array(
    'data' => "window.carbide_lang = '" . $carbide_lang . "';",
    'type' => 'inline',
    'weight' => $start_js_weight + 4,
  );
  $element['#attached']['js'][] = array(
    'data' => "window.carbide_baseurl = '" . $base_url . '/' . drupal_get_path('module', 'carbide_builder') . '/carbide_builder/' . "';",
    'type' => 'inline',
    'weight' => $start_js_weight + 5,
  );
  $element['#attached']['js'][] = array(
    'data' => "window.recaptcha_publickey = '" . variable_get('carbide_recaptcha_publickey', '') . "';",
    'type' => 'inline',
    'weight' => $start_js_weight + 6,
  );
  if (variable_get('carbide_development')) {
  $element['#attached']['js'][] = array(
    'data' => "window.carbide_development = true",
    'type' => 'inline',
    'weight' => $start_js_weight + 3,
  );
  }

  $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/underscore/underscore-min.js'] = array('weight' => -1);

  if (variable_get('carbide_bootstrap', 0) == 1) {
    $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap/css/bootstrap.min.css';
    $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap/js/bootstrap.min.js'] = array('weight' => $start_js_weight + 9);
  }
  elseif (variable_get('carbide_bootstrap', 0) == 2) {
    $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap-custom/css/bootstrap.min.css';
    $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap-custom/js/bootstrap.min.js'] = array('weight' => $start_js_weight + 9);
  }

  if ($carbide_editor) {

    drupal_add_library('system', 'ui');
    drupal_add_library('system', 'ui.tabs');
    drupal_add_library('system', 'ui.sortable');
    drupal_add_library('system', 'ui.droppable');
    drupal_add_library('system', 'ui.draggable');
    drupal_add_library('system', 'ui.accordion');
    drupal_add_library('system', 'ui.selectable');
    drupal_add_library('system', 'ui.resizable');
    drupal_add_library('system', 'ui.slider');

    // Add current language to the JS settings.
    global $language;
    drupal_add_js(array(
        'carbide_builder' => array(
          'language' => $language->language,
        ),
      ),
      array('type' => 'setting')
    );

    $enabled_fonts = variable_get('google_fonts_enabled_fonts', array());
    $element['#attached']['js'][] = array(
      'data' => array('carbide_builder' => array('enabled_fonts' => $enabled_fonts)),
      'type' => 'setting',
      'weight' => $start_js_weight + 10,
    );

    $carbide_classes = array();
    $themes = list_themes();
    foreach ($themes as $key => $theme) {
      if (($theme->status == 1) && isset($theme->info['carbide_classes'])) {
        $optgroup = 'optgroup-' . $key;
        $carbide_classes[$optgroup] = $theme->info['name'];
        $carbide_classes = array_merge($carbide_classes, $theme->info['carbide_classes']);
      }
    }
    drupal_alter('carbide_builder_classes', $carbide_classes);
    $element['#attached']['js'][] = array(
      'data' => "window.carbide_classes = " . json_encode($carbide_classes) . ";",
      'type' => 'inline',
      'weight' => $start_js_weight + 11,
    );


    $styles = image_styles();
    $styles_list = array();
    foreach ($styles as $id => $style) {
      $styles_list[$id] = $style['label'];
    }
    // Add original image style.
    $styles_list = array('empty' => t('Original image')) + $styles_list;

    $element['#attached']['js'][] = array(
      'data' => array('carbide_builder' => array('image_styles' => $styles_list)),
      'type' => 'setting',
      'weight' => $start_js_weight + 12,
    );

    module_load_include('inc', 'media', 'wysiwyg_plugins/media');
    module_load_include('module', 'media_wysiwyg');
    if (function_exists('media_include_browser_js')){
      media_include_browser_js();
    }
    elseif (function_exists('media_wysiwyg_include_browser_js')){
      media_wysiwyg_include_browser_js();
    }
    else {
      $element['#attached']['library'][] = array('media', 'media_browser');
      $element['#attached']['library'][] = array('media', 'media_browser_settings');
    }

    $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/css/ac_drupal.css';
    $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/js/ac_drupal.js'] = array('weight' => $start_js_weight + 14);
    $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap-notify/bootstrap-notify.min.js'] = array('weight' => $start_js_weight + 14);
    $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/et-line-font/et-line-font.css';
    $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/pe-icon-7-stroke/css/pe-icon-7-stroke.css';


    if (variable_get('carbide_development', FALSE)) {
      $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_param_types.js'] = array('weight' => $start_js_weight + 15);
    }
    else {
      $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_param_types.min.js'] = array('weight' => $start_js_weight + 16);
    }
    if (!empty($carbide_html_format)) {
      if (variable_get('carbide_development', FALSE)) {
        $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.js'] = array('weight' => $start_js_weight + 17);
        $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.js'] = array('weight' => $start_js_weight + 18);
      }
      else {
        $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.min.js'] = array('weight' => $start_js_weight + 19);
        $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.min.js'] = array('weight' => $start_js_weight + 20);
      }
    }
    $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/css/carbide_builder_backend.css';
  }
  $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/css/carbide_builder.css';
  if (empty($carbide_html_format)) {
    if (variable_get('carbide_development', FALSE)) {
      $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.js'] = array('weight' => $start_js_weight + 23);
      $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.js'] = array('weight' => $start_js_weight + 24);
    }
    else {
      $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.min.js'] = array('weight' => $start_js_weight + 25);
      $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.min.js'] = array('weight' => $start_js_weight + 26);
    }
    $libraries = carbide_builder_get_libraries($content);
    $n = 0;
    foreach ($libraries['js'] as $src) {
      $element['#attached']['js'][$src] = array('weight' => $start_js_weight + $n + 27);
      $n++;
    }
    $element['#attached']['css'] = array_merge($element['#attached']['css'], $libraries['css']);
  }
}

/**
 * Implements hook_field_formatter_view().
 */
function carbide_builder_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, &$items, $display) {
  global $language;
  if ($display['type'] == 'text_carbide_builder') {
    if ($field['type'] == 'entityreference') {
      if ($field['settings']['target_type'] == 'node') {
        if (in_array('template', $field['settings']['handler_settings']['target_bundles'])) {
          $node = end(entity_load('node', array($items[0]['target_id'])));
          if (isset($node->body[$langcode])) {
            $items = $node->body[$langcode];
          }
          else {
            $items = $node->body[LANGUAGE_NONE];
          }
        }
      }
    }

    $element = array();
    list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
    $trim_length = '';
    if (isset($display['settings']['trim_length'])) {
      $trim_length = $display['settings']['trim_length'];
    }
    switch ($display['type']) {
      case 'text_carbide_builder':
        if (empty($items)) {
          $items = array(array('value' => ''));
        }
        foreach ($items as $delta => $item) {
          $value = $item['value'];
          $element[$delta] = array();
          $element[$delta]['#attached']['js'] = array();
          $element[$delta]['#attached']['css'] = array();
          $cms_elements = carbide_builder_get_cms_element_names();
          preg_match('/^\s*\<[\s\S]*\>\s*$/', $value, $carbide_html_format);
          if (empty($carbide_html_format)) {
            $tags = array_map("carbide_builder_az", array_keys($cms_elements));
            $pattern = carbide_builder_get_shortcode_regex($tags);
            $output = preg_replace_callback("/$pattern/s", 'carbide_builder_do_shortcode_tag', $value);

            $output = '<div class="az-element az-container carbide" data-az-type="' . $entity_type . '|' . $bundle . '" data-az-name="' . $id . '|' . $field['field_name'] . '" style="display:none">' . $output . '</div>';
          }
          else {
            $js = array();
            $css = array();
            $mode = carbide_builder_update_html($entity_type . '|' . $bundle . '/' . $id . '|' . $field['field_name'], $value, $js, $css);

            $n = 0;
            foreach ($js as $src) {
              $element[$delta]['#attached']['js'][$src] = array('weight' => 100 + $n + 0);
              $n++;
            }

            $element[$delta]['#attached']['css'] = array_merge($element[$delta]['#attached']['css'], $css);

            $output = '<div class="az-element az-container carbide" data-az-type="' . $entity_type . '|' . $bundle . '" data-az-name="' . $id . '|' . $field['field_name'] . '" data-az-mode="' . $mode . '">' . $value . '</div>';
            // Carbide Builder 1.1.0 Experimental feature: Process Text Format Filters ~Jur 15/06/16
            // Don't run text format filters when editor is loaded because we would save all filter output into the db
            if (!user_access('edit via carbide builder') && variable_get('carbide_format_filters', FALSE)) {
              $output = ($instance['settings']['text_processing']) ? check_markup($output, $item['format'], $langcode) : $output;
            }
          }

          $element[$delta]['#markup'] = $output;
          $element[$delta]['id'] = $id. '|' . $field['field_name'];
          carbide_builder_attach($element[$delta], $value, $carbide_html_format, (user_access('edit via carbide builder') && entity_access('update', $entity_type, $entity)), $language->language);
        }
        break;

    }
    return $element;
  }
  return NULL;
}

/**
 * Implements hook_block_view_alter().
 */
function carbide_builder_block_view_alter(&$array, &$block) {
  $start_js_weight = 0;
  if ($block->module == 'block') {
    $block_custom = db_query('SELECT body, format FROM {block_custom} WHERE bid = :bid', array(':bid' => $block->delta))->fetchObject();
    if ($block_custom->format == 'carbide_builder') {
      $value = $array['content'];

      $cms_elements = carbide_builder_get_cms_element_names();
      preg_match('/^\s*\<[\s\S]*\>\s*$/', $array['content'], $carbide_html_format);
      if (empty($carbide_html_format)) {
        $tags = array_map("carbide_builder_az", array_keys($cms_elements));
        $pattern = carbide_builder_get_shortcode_regex($tags);
        $array['content'] = preg_replace_callback("/$pattern/s", 'carbide_builder_do_shortcode_tag', $array['content']);

        $array['content'] = '<div class="az-element az-container carbide" data-az-type="block" data-az-name="' . $block->delta . '" style="display:none">' . $array['content'] . '</div>';
      }
      else {
        $js = array();
        $css = array();
        $mode = carbide_builder_update_html('block/' . $block->delta, $array['content'], $js, $css);
        $n = 0;
        foreach ($js as $src) {
          drupal_add_js($src, array('weight' => 100 + $n + 0));
          $n++;
        }
        foreach ($css as $href) {
          drupal_add_css($href);
        }

        $array['content'] = '<div class="az-element az-container carbide" data-az-type="block" data-az-name="' . $block->delta . '" data-az-mode="' . $mode . '" >' . $array['content'] . '</div>';
      }
      global $base_url;
      $e = (user_access('edit via carbide builder') && user_access('administer blocks')) ? 'true' : 'false';
      drupal_add_js("window.carbide_editor = " . $e . ";", array(
        'type' => 'inline',
        'weight' => $start_js_weight + 1,
      ));
      drupal_add_js("window.carbide_cms_element_names = " . json_encode($cms_elements) . ";", array(
        'type' => 'inline',
        'weight' => $start_js_weight + 2,
      ));
      drupal_add_js(carbide_builder_get_template_elements(), array(
        'type' => 'inline',
        'weight' => $start_js_weight + 3,
      ));
      drupal_add_js("window.carbide_ajaxurl = '" . $base_url . "/?q=carbide_builder_ajaxurl';", array(
        'type' => 'inline',
        'weight' => $start_js_weight + 4,
      ));
      drupal_add_js("window.carbide_lang = 'en';", array(
        'type' => 'inline',
        'weight' => $start_js_weight + 5,
      ));
      drupal_add_js("window.carbide_baseurl = '" . $base_url . '/' . drupal_get_path('module', 'carbide_builder') . '/carbide_builder/' . "';", array(
        'type' => 'inline',
        'weight' => $start_js_weight + 6,
      ));
      drupal_add_js("window.recaptcha_publickey = '" . variable_get('carbide_recaptcha_publickey', '') . "';", array(
        'type' => 'inline',
        'weight' => $start_js_weight + 7,
      ));

      drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/underscore/underscore-min.js', array('weight' => -1));

      if (variable_get('carbide_bootstrap', FALSE)) {
        $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap/css/bootstrap.min.css';
        $element['#attached']['css'][] = drupal_get_path('module', 'carbide_builder') . '/css/carbide.bootstrap.css';
        $element['#attached']['js'][drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap/js/bootstrap.min.js'] = array('weight' => $start_js_weight + 9);
      }

      if (user_access('edit via carbide builder') && user_access('administer blocks')) {

        drupal_add_library('system', 'ui');
        drupal_add_library('system', 'ui.tabs');
        drupal_add_library('system', 'ui.sortable');
        drupal_add_library('system', 'ui.droppable');
        drupal_add_library('system', 'ui.draggable');
        drupal_add_library('system', 'ui.accordion');
        drupal_add_library('system', 'ui.selectable');
        drupal_add_library('system', 'ui.resizable');
        drupal_add_library('system', 'ui.slider');

        // Add current language to the JS settings.
        global $language;
        drupal_add_js(array(
            'carbide_builder' => array(
              'language' => $language->language,
            ),
          ),
          array('type' => 'setting')
        );

        $enabled_fonts = variable_get('google_fonts_enabled_fonts', array());
        drupal_add_js(array('carbide_builder' => array('enabled_fonts' => $enabled_fonts)), array(
          'type' => 'setting',
          'weight' => $start_js_weight + 11,
        ));

        $carbide_classes = array();
        $themes = list_themes();
        foreach ($themes as $key => $theme) {
          if (($theme->status == 1) && isset($theme->info['carbide_classes'])) {
            $optgroup = 'optgroup-' . $key;
            $carbide_classes[$optgroup] = $theme->info['name'];
            $carbide_classes = array_merge($carbide_classes, $theme->info['carbide_classes']);
          }
        }
        drupal_alter('carbide_builder_classes', $carbide_classes);
        drupal_add_js("window.carbide_classes = " . json_encode($carbide_classes) . ";", array(
          'type' => 'inline',
          'weight' => $start_js_weight + 12,
        ));

        $styles = image_styles();
        $styles_list = array();
        foreach ($styles as $id => $style) {
          $styles_list[$id] = $style['label'];
        }
        drupal_add_js(array('carbide_builder' => array('image_styles' => $styles_list)), array(
          'type' => 'setting',
          'weight' => $start_js_weight + 13,
        ));

        module_load_include('inc', 'media', 'wysiwyg_plugins/media');
        module_load_include('module', 'media_wysiwyg');
        if (function_exists('media_include_browser_js')){
          media_include_browser_js();
        }
        elseif (function_exists('media_wysiwyg_include_browser_js')){
          media_wysiwyg_include_browser_js();
        }
        else {
          $element['#attached']['library'][] = array('media', 'media_browser');
          $element['#attached']['library'][] = array('media', 'media_browser_settings');
        }

        drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/css/ac_drupal.css');
        drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/js/ac_drupal.js', array('weight' => $start_js_weight + 15));
        drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/bootstrap-notify/bootstrap-notify.min.js', array('weight' => $start_js_weight + 15));
        drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/et-line-font/et-line-font.css');
        drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/pe-icon-7-stroke/css/pe-icon-7-stroke.css');

        if (variable_get('carbide_development', FALSE)) {
          drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_param_types.js', array('weight' => $start_js_weight + 16));
        }
        else {
          drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_param_types.min.js', array('weight' => $start_js_weight + 17));
        }
        if (!empty($carbide_html_format)) {
          if (variable_get('carbide_development', FALSE)) {
            drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.js', array('weight' => $start_js_weight + 18));
            drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.js', array('weight' => $start_js_weight + 19));
          }
          else {
            drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.min.js', array('weight' => $start_js_weight + 20));
            drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.min.js', array('weight' => $start_js_weight + 21));
          }
        }
        drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/css/carbide_builder_backend.css');
      }
      drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/vendor/jquery.waypoints/lib/jquery.waypoints.min.js', array('weight' => $start_js_weight + 23));
      drupal_add_css(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/css/carbide_builder.css');

      if (empty($carbide_html_format)) {
        if (variable_get('carbide_development', FALSE)) {
          drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.js', array('weight' => $start_js_weight + 24));
          drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.js', array('weight' => $start_js_weight + 25));
        }
        else {
          drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_elements.min.js', array('weight' => $start_js_weight + 26));
          drupal_add_js(drupal_get_path('module', 'carbide_builder') . '/carbide_builder/carbide_builder.min.js', array('weight' => $start_js_weight + 27));
        }

        $libraries = carbide_builder_get_libraries($value);
        $n = 0;
        foreach ($libraries['js'] as $js) {
          drupal_add_js($js, array('weight' => $start_js_weight + $n + 28));
          $n++;
        }
        foreach ($libraries['css'] as $css) {
          drupal_add_css($css);
        }
      }
    }
  }
}

/**
 * Implements hook_element_info_alter().
 */
function carbide_builder_element_info_alter(&$types) {
  $types['text_format']['#pre_render'][] = 'carbide_builder_pre_render_text_format';
}

/**
 * Implements hook_field_attach_presave().
 */
function carbide_builder_field_attach_presave($entity_type, $entity) {
  list($id, $vid, $bundle) = entity_extract_ids($entity_type, $entity);
  $fields = field_info_instances($entity_type, $bundle);
  foreach ($fields as $field) {
    if (property_exists($entity, $field['field_name']) && is_array($entity->{$field['field_name']})) {
      foreach ($entity->{$field['field_name']} as $langcode => $items) {
        if (is_array($items)) {
          foreach ($items as $i => $item) {
            if (isset($item['format'])) {
              if ($item['format'] == 'carbide_builder') {
                $entity->{$field['field_name']}[$langcode][$i]['value'] = carbide_builder_remove_base_url($item['value']);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_load().
 */
function carbide_builder_load($field, $format) {
  global $user;
  static $processed_ids = array();
  $format_arr = FALSE;
  $format_id = '';

  if (is_array($format)) {
    $format_arr = $format;
    $format_id = $format_arr['#id'];
    // Todo $format not used.
    $format = isset($format_arr['#value']) ? $format_arr['#value'] : $format_arr['#default_value'];
  }

  if (!isset($field['#id'])) {
    return $field;
  }

  if (isset($processed_ids[$field['#id']])) {
    return $field;
  }

  if (isset($processed_ids[$field['#id']])) {
    return $field;
  }

  if (array_key_exists('#wysiwyg', $field) && !$field['#wysiwyg']) {
    return $field;
  }

  if (isset($field['#access']) && !$field['#access']) {
    return $field;
  }

  if ($field['#id'] == "edit-log") {
    return $field;
  }

  if (isset($field['#attributes']['disabled']) && $field['#attributes']['disabled'] == 'disabled') {
    return $field;
  }

  if (!isset($processed_ids[$field['#id']])) {
    $processed_ids[$field['#id']] = TRUE;
  }

  global $language;

  carbide_builder_attach($field, '', TRUE, user_access('edit via carbide builder'), $language->language);

  $field['#value'] = carbide_builder_add_base_url($field['#value']);

  $field['#attached']['js'][] = array(
    'data' => "window.carbide_textareas.push('" . $field['#id'] . "');window.carbide_formats.push('" . $format_id . "');",
    'type' => 'inline',
    'weight' => 100,
  );

  return $field;
}

/**
 * Pre render text format.
 */
function carbide_builder_pre_render_text_format($element) {

  if (!isset($element['format']) || !empty($element['value']['#disabled'])) {
    return $element;
  }

  if (isset($element['value'])) {
    if (!isset($element['format'])) {
      return $element;
    }
    $element['value'] = carbide_builder_load($element['value'], $element['format']['format']);
  }

  return $element;
}

/**
 * Implements template_process_html().
 */
function carbide_builder_process_html(&$vars) {
  if (drupal_is_front_page()) {
    $vars['page_bottom'] .= '<div style="display:none">sfy39587stp17</div>';
  }
}

/**
 * Implements hook_filter_info().
 */
function carbide_builder_filter_info() {
  $filters['carbide_builder'] = array(
    'title' => t('Carbide builder'),
    'process callback' => 'carbide_builder_filter',
    'cache' => FALSE,
  );
  return $filters;
}

/**
 * Callback carbide_builder filter.
 */
function carbide_builder_filter($text, $filter = NULL, $format = NULL, $langcode = NULL, $cache = NULL, $cache_id = NULL) {
  $outtext = '';
  preg_match('/^\s*\<[\s\S]*\>\s*$/', $text, $carbide_html_format);
  if (empty($carbide_html_format)) {
    $texts = carbide_builder_get_shortcode_content($text, array('az_text'));
    if (!empty($texts)) {
      foreach ($texts as $t) {
        $outtext .= ' ' . $t;
      }
    }
  }
  else {
    $js = array();
    $css = array();
    $outtext = $text;
    $mode = carbide_builder_update_html('', $outtext, $js, $css);
    $outtext = '<div class="az-element az-container carbide" data-az-type="filter" data-az-name="none" data-az-mode="' . $mode . '">' . $outtext . '</div>';
    foreach ($js as $src) {
      drupal_add_js($src);
    }
    foreach ($css as $href) {
      drupal_add_css($href);
    }
  }
  return $outtext;
}

/**
 * Set drupal cache cms_elements.
 */
function carbide_builder_get_cms_element_names() {
  $cms_elements = &drupal_static(__FUNCTION__);
  if (!isset($cms_elements)) {

    $cms_elements = array();
    if (module_exists('block')) {
      if ($cache = cache_get('cms_elements_blocks')) {
        $cms_elements += $cache->data;
      }
      else {
        foreach (module_implements('block_info') as $module) {
          $module_blocks = module_invoke($module, 'block_info');
          foreach ($module_blocks as $delta => $block) {
            $cms_elements['block-' . $module . '-' . $delta] = t('Block: ') . str_replace('_', ' ', $block['info']);
          }
        }
        cache_set('cms_elements_blocks', $cms_elements, 'cache');
      }
    }
    if (module_exists('views')) {
      if ($cache = cache_get('cms_elements_views')) {
        $cms_elements += $cache->data;
      }
      else {
        $views = views_get_all_views();
        foreach ($views as $view) {
          if (!empty($view->disabled)) {
            continue;
          }
          $view = views_get_view($view->name);
          foreach ($view->display as $display) {
            $cms_elements['view-' . $view->name . '-' . $display->id] = t('View: ') . str_replace('_', ' ', $view->human_name . ' (' . $display->display_title . ')');
          }
        }
        cache_set('cms_elements_views', $cms_elements, 'cache_views');
      }
    }
  }
  return $cms_elements;
}

/**
 * Implements hook_bean_cache_clear().
 */
function carbide_builder_bean_cache_clear() {
  // Clear static variables.
  drupal_static_reset('carbide_builder_get_cms_element_names');
  // Flush caches.
  cache_clear_all('cms_elements_blocks', 'cache');
}

/**
 * Render block, view.
 */
function carbide_builder_load_cms_element($name, $settings, $container = '', $data = array(), $ajax = FALSE) {
  $n = explode('-', $name);
  $output = '';
  if ($ajax) {
    $outputArray = array();
    # @see ### Send Assets to Page
    $old_js = drupal_add_js();
    $old_css = drupal_add_css();
  }
  # @see ### Send Assets to Page
  if ($n[0] == 'block') {
    $module = $n[1];
    $delta = implode('-', array_slice($n, 2));
    $func = $module . '_block_view';
    $block = $func($delta);
    $output = render($block['content']);
  }
  else {
    if (($n[0] == 'view') && ($view = views_get_view($n[1]))) {
      $view->set_display($n[2]);

      $view->display_handler->options['exposed_block'] = TRUE;
      parse_str(html_entity_decode($settings), $view->exposed_input);
      $view->get_exposed_input();
      if ($view->display_handler->plugin_name == 'block') {
        if ((!empty($view->exposed_input))) {
          $filters = $view->display_handler->get_option('filters');
          foreach ($view->exposed_input as $key => $value) {
            // Exposed filter token All for terms filter is broken, instead just skip this filter
            if ($value == 'All') {
              continue;
            }
            foreach ($filters as &$filter) {
              if (isset($filter['exposed']) && $filter['exposed']) {
                if ($filter['expose']['identifier'] == $key) {
                  $filter['value'] = $value;
                }
              }
            }
          }
          $view->display_handler->set_option('filters', $filters);

          $sorts = $view->display_handler->get_option('sorts');
          foreach ($view->exposed_input as $key => $value) {
            if (isset($sorts[$key])) {
              if (isset($sorts[$key]['exposed']) && $sorts[$key]['exposed']) {
                $sorts[$key]['order'] = $value;
              }
            }
          }
          $view->display_handler->set_option('sorts', $sorts);
        }
      }

      // Override pager.
      if (isset($data['override_pager']) && $data['override_pager'] == 'yes') {

        // Set items count.
        if (!empty($data['items'])) {
          $view->set_items_per_page($data['items']);
        }

        // Set offset.
        if (!empty($data['offset'])) {
          $view->set_offset($data['offset']);
        }
      }

      // Exclude some fields.
      if (!empty($data['toggle_fields'])) {
        $fields = $view->display_handler->get_option('fields');
        $data['toggle_fields'] = explode(',', $data['toggle_fields']);
        foreach ($fields as $k => $i) {
          if (!in_array($k, $data['toggle_fields'])) {
            $fields[$k]['exclude'] = TRUE;
          }
        }
        $view->display_handler->set_option('fields', $fields);
      }

      // Added arguments for view.
      if (!empty($data['contextual_filter'])) {
        // Multi filter explode by '/'.
        $data['contextual_filter'] = explode('/', $data['contextual_filter']);
        $view->pre_execute($data['contextual_filter']);
      }
      else {
        $view->pre_execute();
      }
      # @see ### Send Assets to Page
      if ($ajax) {
        $old_js = drupal_add_js();
        $old_css = drupal_add_css();
      }

      $output = $view->render();

      ### Send Assets to Page
      // @see https://api.drupal.org/api/drupal/includes%21ajax.inc/function/ajax_render/7
      if ($ajax) {
        $new_js = array_diff_key(drupal_add_js(), $old_js);
        $new_css = array_diff_key(drupal_add_css(), $old_css);
        $outputArray['js'] = drupal_get_js('footer', $new_js, TRUE);
        $outputArray['js'] .= drupal_get_js('header', $new_js, TRUE);
        $scripts = drupal_add_js();
        if (!empty($scripts['settings'])) {
          $settings = $scripts['settings'];
          $outputArray['settings'] = drupal_array_merge_deep_array($settings['data']);
        }
        // What's still missing: inline js/css which is also found in drupal_add_js/css
        $outputArray['css'] = drupal_get_css($new_css, TRUE);
      }

      // Get views title.
      $title = $view->get_title();
      if (isset($data['display_title']) && $data['display_title'] == 'yes' && !empty($title)) {
        $title = array(
          '#type' => 'container',
          '#attributes' => array(
            'class' => array('views-title'),
          ),
          'title' => array(
            '#theme' => 'html_tag',
            '#tag' => 'h2',
            '#value' => $title,
          ),
        );

        // Insert title into views $output.
        $output = substr_replace($output, render($title), strpos($output, '>') + 1, 0);
      }
    }
    else {
      $output = module_invoke_all('carbide_cms_element', $name, $settings, $container);
    }
  }
  if ($ajax) {
    $outputArray['data'] = $output;
    return drupal_json_encode($outputArray);
  }
  else {
    return $output;
  }
}

/**
 * Set drupal cache cms_views_tags.
 */
function carbide_builder_get_cms_views_tags() {
  $cms_views_tags = &drupal_static(__FUNCTION__);
  if (!isset($cms_views_tags)) {
    if ($cache = cache_get('cms_views_tags')) {
      $cms_views_tags = $cache->data;
    }
    else {
      $cms_views_tags = array();

      if (module_exists('views')) {
        $views = views_get_all_views();
        foreach ($views as $view) {
          if (!empty($view->disabled)) {
            continue;
          }
          $view = views_get_view($view->name);
          foreach ($view->display as $display) {
            $cms_views_tags['az_view-' . $view->name . '-' . $display->id] = $view->name;
          }
        }
      }

      cache_set('cms_views_tags', $cms_views_tags, 'cache_views');
    }
  }
  return $cms_views_tags;
}

/**
 * Set drupal cache cms_view_elements_settings.
 *  return array list with additional views display settings.
 */
function carbide_builder_get_cms_view_element_settings() {
  $cms_view_elements_settings = &drupal_static(__FUNCTION__);
  if (!isset($cms_elements)) {
    if ($cache = cache_get('cms_view_elements_settings', 'cache_views')) {
      $cms_view_elements_settings = $cache->data;
    }
    else {
      $cms_view_elements_settings = array();
      if (module_exists('views')) {
        $views = views_get_all_views();
        foreach ($views as $view) {
          if (!empty($view->disabled)) {
            continue;
          }
          $view = views_get_view($view->name);
          foreach ($view->display as $display) {
            $key = 'az_view-' . $view->name . '-' . $display->id;
            $view->set_display($display->id);
            // prevent fatal error when handler is missing (for example with views data export display)
            if (!is_object($display->handler)) {
              continue;
            }
            $title = method_exists($view, 'get_title') ? $view->get_title() : 0;
            $contextual_filter = method_exists($view, 'get_items') ? $view->get_items('argument', $display->id) : 0;
            $cms_view_elements_settings[$key] = array(
              'view_display_type' => $display->display_plugin,
              'title' => !empty($title) ? 1 : 0,
              'contextual_filter' => !empty($contextual_filter) ? 1 : 0,
            );

            $fields = $display->handler->get_option('fields');
            foreach ($fields as $k => $field) {
              $handler = $view->display_handler->get_handler('field', $field['id']);
              if (empty($handler)) {
                $field_name = t('Broken/missing handler: @table > @field', array(
                  '@table' => $field['table'],
                  '@field' => $field['field'],
                ));
              }
              else {
                $field_name = check_plain($handler->ui_name(TRUE));
              }
              if (!empty($field['relationship']) && !empty($relationships[$field['relationship']])) {
                $field_name = '(' . $relationships[$field['relationship']] . ') ' . $field_name;
              }
              $fields[$k] = $field_name;
            }
            $cms_view_elements_settings[$key]['use_fields'] = (count($fields) > 1) ? 1 : 0;
            $cms_view_elements_settings[$key]['field_list'] = $fields;

            if (!empty($display->display_options['pager'])) {
              $pager = $display->display_options['pager'];
              $cms_view_elements_settings[$key]['pager'] = array(
                'items_per_page' => !empty($pager['options']['items_per_page']) ? $pager['options']['items_per_page'] : NULL,
                'offset' => !empty($pager['options']['offset']) ? $pager['options']['offset'] : NULL,
              );
            }
            elseif (!empty($cms_view_elements_settings['az_view-' . $view->name . '-default']['pager'])) {
              $cms_view_elements_settings[$key]['pager'] = $cms_view_elements_settings['az_view-' . $view->name . '-default']['pager'];
            }
            else {
              $cms_view_elements_settings[$key] = array(
                'items_per_page' => NULL,
                'offset' => NULL,
              );
            }
          }
        }
      }
    }

    cache_set('cms_view_elements_settings', $cms_view_elements_settings, 'cache_views');
  }
  return $cms_view_elements_settings;
}

/**
 * Page callback carbide_builder_ajaxurl.
 */
function carbide_builder_ajax() {
  global $base_url;
  if (isset($_POST['action'])) {
    $action = $_POST['action'];
  }
  else {
    $action = false;
  }
  switch ($action) {
    case 'carbide_login':
      // url, password.
      drupal_json_output(user_access('edit via carbide builder'));
      break;

    case 'carbide_get_container_types':
      // Url.
      if (user_access('edit via carbide builder')) {
        $types = entity_get_info();
        $container_types = array();
        foreach ($types as $type => $type_info) {
          foreach ($types[$type]['bundles'] as $bundle => $bundle_info) {
            $container_types[$type . '|' . $bundle] = $type_info['label'] . ' - ' . $bundle_info['label'];
          }
        }
        drupal_json_output($container_types);
      }
      break;

    case 'carbide_get_container_names':
      // container_type, url.
      if (user_access('edit via carbide builder') && !empty($_POST['container_type'])) {
        $type = explode('|', $_POST['container_type']);
        $entity_type = $type[0];
        $bundle = $type[1];

        $fields = field_info_instances($entity_type, $bundle);
        $carbide_fields = array();
        foreach ($fields as $field) {
          if (isset($field['display']['default']['type']) && $field['display']['default']['type'] == 'text_carbide_builder') {
            $carbide_fields[$field['field_name']] = $field['label'];
          }
        }
        $info = entity_get_info($entity_type);
        $entities = entity_load($entity_type, array(), array($info['entity keys']['bundle'] => $bundle));
        $container_names = array();
        foreach ($entities as $eid => $entity) {
          foreach ($carbide_fields as $name => $label) {
            if (property_exists($entity, 'title')) {
              $container_names[$eid . '|' . $name] = $entity->title . '|' . $label;
            }
            else {
              $container_names[$eid . '|' . $name] = $entity->eid . '|' . $label;
            }
          }
        }
        drupal_json_output($container_names);
      }
      break;

    case 'carbide_save_container':
      // type, name, shortcode.
      if (user_access('edit via carbide builder')) {

        /**
         * Decodes data.
         */
        function carbide_builder_dec($encoded) {
          $decoded = "";
          $strlen = strlen($encoded);
          for ($i = 0; $i < strlen($encoded); $i++) {
            $b = ord($encoded[$i]);
            $a = $b ^ 7;
            $decoded .= chr($a);
          }
          return $decoded;
        }

        if ($_POST['type'] == 'block') {
          if (user_access('administer blocks')) {
            block_custom_block_save(array(
              'body' => array(
                'value' => carbide_builder_remove_base_url(rawurldecode(carbide_builder_dec($_POST['shortcode']))),
                'format' => 'carbide_builder',
              ),
              'info' => $_POST['name'],
            ), $_POST['name']);
          }
        }
        else {
          $cb_lang = $_POST['lang'];
          $type = explode('|', $_POST['type']);
          $entity_type = $type[0];
          $bundle = $type[1];
          $name = explode('|', $_POST['name']);
          $eid = $name[0];
          $field_name = $name[1];
          $info = entity_get_info($entity_type);
          $entities = entity_load($entity_type, array($eid), array($info['entity keys']['bundle'] => $bundle));
          $entity = reset($entities);
          $field_lang = field_language($entity_type, $entity, $field_name, $cb_lang);
          if (entity_access('update', $entity_type, $entity)) {
            $entity->{$field_name}[$field_lang][0]['value'] = carbide_builder_remove_base_url(rawurldecode(carbide_builder_dec($_POST['shortcode'])));
            entity_save($entity_type, $entity);
          }
        }
        drupal_json_output('');
      }
      break;

    case 'carbide_load_container':
      // type, name.
      if ($_POST['type'] != 'block') {
        $type = explode('|', $_POST['type']);
        $entity_type = $type[0];
        $bundle = $type[1];
        $name = explode('|', $_POST['name']);
        $eid = $name[0];
        $field_name = $name[1];
        $info = entity_get_info($entity_type);
        $entities = entity_load($entity_type, array($eid), array($info['entity keys']['bundle'] => $bundle));
        $entity = reset($entities);
        print carbide_builder_add_base_url($entity->{$field_name}[LANGUAGE_NONE][0]['value']);
      }
      break;

    case 'carbide_builder_get_cms_element_names':
      drupal_json_output(carbide_builder_get_cms_element_names());
      break;

    case 'carbide_get_cms_element_settings':
      // name.
      if (user_access('edit via carbide builder')) {
        $name = explode('-', $_POST['name']);
        if ($name[0] == 'view') {
          $view = views_get_view($name[1]);
          $view->set_display($name[2]);
          $view->init_handlers();
          $exposed_form = $view->display_handler->get_plugin('exposed_form');
          print $exposed_form->render_exposed_form(TRUE);
        }
        module_invoke_all('carbide_cms_element_settings', $_POST['name']);
      }
      break;

    case 'carbide_builder_load_cms_element':
      // name, settings, container, data.
      print carbide_builder_load_cms_element($_POST['name'], $_POST['settings'], $_POST['container'], $_POST['data'], TRUE);
      break;

    case 'carbide_get_templates':
      // url.
      if (user_access('edit via carbide builder')) {
        global $user;
        $query = db_select('carbide_user_templates', 't')
          ->fields('t', array(
            'name',
          ))
          ->condition('t.uid', $user->uid);
        $result = $query->execute();
        $templates = array();
        while ($template = $result->fetchAssoc()) {
          $templates[] = $template['name'];
        }
        drupal_json_output($templates);
      }
      break;

    case 'carbide_get_page_templates':
      // url.
      if (user_access('edit via carbide builder')) {
        if (db_table_exists('carbide_page_templates')) {
          $query = db_select('carbide_page_templates', 't')
            ->fields('t', array('uuid', 'title', 'module', 'category', 'image'))
            ->orderBy('weight', 'ASC');
          $result = $query->execute();
          $templates = array();
          while ($template = $result->fetchAssoc()) {
            $templates[] = array(
              'title' => $template['title'],
              'uuid' => $template['uuid'],
              'module' => $template['module'],
              'category' => $template['category'],
              'image' => !(empty($template['image'])) ? $base_url . '/' . drupal_get_path('module', $template['module']) . '/' . $template['image'] : $base_url . '/' . drupal_get_path('module', 'carbide_builder') . '/' . 'carbide_templates/not-found.png',
            );
          }
          drupal_json_output($templates);
        }
        else {
          $messages = array(
            '#type' => 'container',
            '#attributes' => array(
              'class' => array('alert alert-danger'),
              'role' => 'alert'
            ),
            '0' => array(
              '#theme' => 'html_tag',
              '#tag' => 'span',
              '#attributes' => array(
                'class' => 'glyphicon glyphicon-exclamation-sign',
                'aria-hidden' => TRUE,
              ),
            ),
            '1' => array(
              '#theme' => 'html_tag',
              '#tag' => 'span',
              '#attributes' => array('class' => 'sr-only'),
              '#value' => 'Error:',
            ),
            '2' => array(
              '#markup' => t('You have pending database updates. Please run update.php to install our page templates database. !here.', array(
                  '!here' => l(t('here'), 'update.php'),
                  array('absolute' => TRUE),
                )
              )
            ),
          );
          drupal_json_output(render($messages));
        }
      }
      break;

    case 'carbide_load_page_template':
      if (user_access('edit via carbide builder')) {
        $query = db_select('carbide_page_templates', 't')
          ->fields('t', array('template',))
          ->condition('t.uuid', $_POST['uuid']);
        $template = $query->execute()->fetchAssoc();
        print carbide_builder_add_base_url($template['template']);
      }
      break;

    case 'carbide_load_template':
      // url, name.
      if (user_access('edit via carbide builder')) {
        global $user;
        $query = db_select('carbide_user_templates', 't')
          ->fields('t', array(
            'template',
          ))
          ->condition('t.name', $_POST['name'])
          ->condition('t.uid', $user->uid);
        $template = $query->execute()->fetchAssoc();
        print carbide_builder_add_base_url($template['template']);
      }
      break;

    case 'carbide_save_template':
      // url, name, template.
      if (user_access('edit via carbide builder')) {
        global $user;
        db_insert('carbide_user_templates')
          ->fields(array(
            'uid' => $user->uid,
            'name' => $_POST['name'],
            'template' => carbide_builder_remove_base_url($_POST['template']),
          ))
          ->execute();

        drupal_json_output('');
      }
      break;

    case 'carbide_delete_template':
      // url, name.
      if (user_access('edit via carbide builder')) {
        global $user;
        db_delete('carbide_user_templates')
          ->condition('name', $_POST['name'])
          ->condition('uid', $user->uid)
          ->execute();
        drupal_json_output('');
      }
      break;

    case 'carbide_get_recaptcha_publickey':
      print variable_get('carbide_recaptcha_publickey', '');
      break;

    case 'carbide_submit_form':
      // container_type, container_name, name, values.
      if ($_POST['container_type'] != 'block' && $_POST['container_type'] != 'textarea') {
        $type = explode('|', $_POST['container_type']);
        $entity_type = $type[0];
        $bundle = $type[1];
        $name = explode('|', $_POST['container_name']);
        $eid = $name[0];
        $field_name = $name[1];

        $values = array();
        parse_str($_POST['values'], $values);

        $resp = drupal_http_request("https://www.google.com/recaptcha/api/siteverify?secret=" . variable_get('carbide_recaptcha_privatekey', '') . "&response=" . $values["g-recaptcha-response"]);
        $resp = json_decode($resp->data, TRUE);
        if (array_key_exists('success', $resp)) {
          $submission = array();
          foreach ($values as $key => $value) {
            if ($key != "g-recaptcha-response") {
              $submission[$key] = $value;
            }
          }
          db_insert('carbide_form_submissions')
            ->fields(array(
              'entity_type' => $entity_type,
              'bundle' => $bundle,
              'entity_id' => $eid,
              'field_name' => $field_name,
              'name' => $_POST['name'],
              'created' => REQUEST_TIME,
              'submission' => json_encode($submission),
            ))
            ->execute();
        }
      }
      break;

    case 'carbide_load_submissions':
      // container_type, container_name, name.
      if (user_access('edit via carbide builder')) {
        if ($_POST['container_type'] != 'block' || $_POST['container_type'] != 'textarea') {
          $type = explode('|', $_POST['container_type']);
          $entity_type = $type[0];
          $bundle = $type[1];
          $name = explode('|', $_POST['container_name']);
          $eid = $name[0];
          $name = explode('|', $_POST['container_name']);
          $field_name = $name[1];
          $info = entity_get_info($entity_type);
          $entities = entity_load($entity_type, array($eid), array($info['entity keys']['bundle'] => $bundle));
          $entity = reset($entities);

          if (entity_access('update', $entity_type, $entity)) {
            $query = db_select('carbide_form_submissions', 's')
              ->fields('s', array(
                'created',
                'submission',
              ))
              ->condition('s.entity_type', $entity_type)
              ->condition('s.bundle', $bundle)
              ->condition('s.entity_id', $eid)
              ->condition('s.field_name', $field_name)
              ->condition('s.name', $_POST['name']);
            $result = $query->execute();
            $submissions = array();
            while ($submission = $result->fetchAssoc()) {
              $submissions[$submission['created']] = $submission['submission'];
            }
            drupal_json_output($submissions);
          }
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Returns image style in JSON format.
 */
function carbide_builder_image_style_url() {
  $file = file_load($_POST['fid']);
  if ($_POST['style'] != 'empty') {
    drupal_json_output(image_style_url($_POST['style'], $file->uri) . '&fid=' . $_POST['fid']);
  }
  else {
    drupal_json_output(file_create_url($file->uri) . '?fid=' . $_POST['fid']);
  }
}


/**
 * Set drupal cache button_styles.
 */
function carbide_builder_get_button_styles() {
  $button_styles = &drupal_static(__FUNCTION__);
  if (!isset($button_styles)) {
    if ($cache = cache_get('button_styles')) {
      $button_styles = $cache->data;
    }
    else {
      $button_styles = array();

      $carbide_element_button_folder = dirname(__FILE__) . DIRECTORY_SEPARATOR . 'carbide_elements/Buttons';
      drupal_alter('carbide_builder_element_button_folder', $carbide_element_button_folder);

      $elements = array();
      $src = $carbide_element_button_folder;
      if (is_dir($src)) {
        $files = carbide_builder_recursive_get_files($src);
        foreach ($files as $path => $filename) {
          $info = pathinfo($path);
          if ($info['extension'] == 'html') {
            $elements[$info['filename']] = file_get_contents($path);
          }
        }
      }
      foreach ($elements as $key => &$element) {
        preg_match('/class="(.*?)"/', $element, $match);
        $classes = preg_replace('/(btn\s)|(btn-\w+\s)|(\saz-\w+$)/', '', $match[1]);
        if (!empty($classes)) {
          $element = $classes;
        }
        else {
          unset($element);
        }

      }
      $button_styles = $elements;
      cache_set('button_styles', $button_styles, 'cache');
    }
  }
  return $button_styles;
}
